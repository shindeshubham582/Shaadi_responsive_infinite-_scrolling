{"version":3,"sources":["components/Food.js","App.js","index.js"],"names":["Food","useState","foodList","updateFoodList","isLoading","setIsLoading","hasError","setHasError","addNewData","window","onscroll","innerHeight","document","documentElement","scrollTop","offsetHeight","useEffect","addFood","a","fetch","foodResponse","ok","Error","json","responseData","defaultArray","key","push","e","catch","error","message","map","FoodItem","i","length","id","onScroll","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"oLAqEeA,EAnEF,WACX,MAAmCC,mBAAS,IAA5C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAa,WACjBH,GAAa,IAoCf,OAjCAI,OAAOC,SAAW,WACZD,OAAOE,YAAcC,SAASC,gBAAgBC,WAAaF,SAASC,gBAAgBE,aANrE,IAOjBP,KAGJQ,qBAAU,WACR,GAAKZ,EAAL,CACA,IAAMa,EAAO,uCAAG,kCAAAC,EAAA,sEACaC,MACzB,gEACA,IAHY,WACRC,EADQ,QAKIC,GALJ,sBAMN,IAAIC,MAAM,wBANJ,uBAQaF,EAAaG,OAR1B,OAUd,GAFMC,EARQ,OASRC,EAAe,GACjBD,EAAc,CAChB,IAAWE,KAAOF,EAChBC,EAAaE,KAAKH,EAAaE,IAEjCvB,GAAe,SAACyB,GACd,MAAM,GAAN,mBAAWA,GAAMH,MAEnBpB,GAAa,GAjBD,4CAAH,qDAoBbY,IAAUY,OAAO,SAAAC,GACbzB,GAAa,GACbE,EAAYuB,EAAMC,eAGrB,CAAC3B,IACAE,GACMF,GAAaE,GAAY,uDAIjC,gCACGJ,EAAS8B,KAAI,SAACC,EAAUC,GACvB,OAAIhC,EAASiC,SAAWD,EAAI,EAExB,sBAAcE,GAAK,OAAQC,SAAY7B,EAAvC,UACG0B,EAAI,EADP,MACaD,IADHC,GAMZ,gCACGA,EAAI,EADP,MACaD,IADHC,MAKb9B,IAAcE,GAAY,+CCpDlBgC,MATf,WACE,OACE,gCACE,6CACA,cAAC,EAAD,QCHNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7B,SAAS8B,eAAe,W","file":"static/js/main.77804951.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst Food = () => {\n  const [foodList, updateFoodList] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const windowOffset = 10;\n  const addNewData = () => {\n    setIsLoading(true)\n  }\n\n  window.onscroll = function () {\n    if (window.innerHeight + document.documentElement.scrollTop >= document.documentElement.offsetHeight - windowOffset) {\n      addNewData()\n    }\n  }\n  useEffect(() => {\n    if (!isLoading) return\n    const addFood = async () => {\n      const foodResponse = await fetch(\n        \"https://demo1-f1a3a-default-rtdb.firebaseio.com/foodList.json\",\n        {}\n      );\n      if (!foodResponse.ok) {\n        throw new Error(\"something Went wrong\");\n      }\n      const responseData = await foodResponse.json();\n      const defaultArray = [];\n      if (responseData) {\n        for (const key in responseData) {\n          defaultArray.push(responseData[key]);\n        }\n        updateFoodList((e) => {\n          return [...e, ...defaultArray];\n        });\n        setIsLoading(false)\n      }\n    };\n    addFood().catch( error => {\n        setIsLoading(false);\n        setHasError(error.message)\n      }\n    );\n  }, [isLoading]);\n  if (hasError) {\n    return !isLoading && hasError && <h1> someThing Went wrong</h1>\n  }\n\n  return (\n    <div>\n      {foodList.map((FoodItem, i) => {\n        if (foodList.length === i + 1) {\n          return (\n            <div key={i}  id = 'last'  onScroll = {addNewData}>\n              {i + 1} : {FoodItem}\n            </div>\n          );\n        }\n        return (\n          <div key={i}>\n            {i + 1} : {FoodItem}\n          </div>\n        );\n      })}\n      {isLoading && !hasError && <h1> Loading </h1>}\n    </div>\n  );\n};\n\nexport default Food;\n","import Food from \"./components/Food\";\n\n\nfunction App() {\n  return (\n    <div >\n      <h1> Food List </h1> \n      <Food />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}